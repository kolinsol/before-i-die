(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))

(define (encode-symbol symbol tree)
  (cond ((leaf? tree) '())
        (else
          (let ((left (left-branch tree))
                (right (right-branch tree)))
            (cond
              ((and (leaf? left)
                    (equal? (symbol-leaf left) symbol)) '(0))
              ((and (leaf? right)
                    (equal? (symbol-leaf right) symbol)) '(1))
              ((and (not (leaf? left))
                    (element-of-set? symbol (symbols left))) 
               (cons '0 (encode-symbol symbol left)))
              ((and (not (leaf? right))
                    (element-of-set? symbol (symbols right))) 
               (cons '1 (encode-symbol symbol right))))))))
